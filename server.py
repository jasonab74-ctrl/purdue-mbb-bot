#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import os
import json
from datetime import datetime, timezone
from flask import Flask, render_template, send_file, send_from_directory, jsonify, request, abort

# Project config
APP_DIR     = os.path.dirname(os.path.abspath(__file__))
ITEMS_PATH  = os.environ.get("ITEMS_PATH", os.path.join(APP_DIR, "items.json"))

# Our modules
from feeds import FEEDS, STATIC_LINKS
# Optional: collector for manual refresh; safe to leave if present
try:
    import collect as collector
except Exception:
    collector = None

app = Flask(__name__, static_folder="static", template_folder="templates")


# ----------------------------
# Root page
# ----------------------------
@app.route("/")
def index():
    # Read items.json (generated by collect.py)
    items = []
    meta = {"generated_at": datetime.now(timezone.utc).isoformat(timespec="seconds")}
    try:
        with open(ITEMS_PATH, "r", encoding="utf-8") as f:
            data = json.load(f)
            items = data.get("items", [])
            meta = data.get("meta", meta)
    except Exception:
        pass  # if items.json missing, render empty list gracefully

    return render_template(
        "index.html",
        items=items,
        feeds=FEEDS,
        static_links=STATIC_LINKS,
        meta=meta,
    )


# ----------------------------
# items.json passthrough (for client auto-refresh)
# ----------------------------
@app.route("/items.json")
def items_json():
    if not os.path.exists(ITEMS_PATH):
        return jsonify({"items": [], "meta": {"error": "items.json not found"}}), 200
    return send_file(ITEMS_PATH, mimetype="application/json")


# ----------------------------
# (Optional) Manual rebuild endpoint
#   - GET /rebuild?key=secret (if you gate it) or POST /rebuild
# ----------------------------
@app.route("/rebuild", methods=["POST", "GET"])
def rebuild():
    if collector is None:
        return jsonify({"ok": False, "msg": "collector module not available"}), 200
    try:
        collector.collect()
        return jsonify({"ok": True, "msg": "collect.py executed"}), 200
    except Exception as e:
        return jsonify({"ok": False, "msg": f"collect error: {e}"}), 200


# ----------------------------
# Favicon + Apple Touch Icon at ROOT (this fixes iOS Favorites)
# ----------------------------
@app.route("/favicon.ico")
def favicon():
    # Serve /favicon.ico from /static/favicon.ico
    return send_from_directory("static", "favicon.ico", mimetype="image/x-icon")

@app.route("/apple-touch-icon.png")
def apple_touch_icon():
    # Serve /apple-touch-icon.png from /static/apple-touch-icon.png
    return send_from_directory("static", "apple-touch-icon.png", mimetype="image/png")


# ----------------------------
# Health
# ----------------------------
@app.route("/health")
def health():
    return jsonify({"ok": True, "ts": datetime.now(timezone.utc).isoformat(timespec="seconds")})


if __name__ == "__main__":
    # Local run
    port = int(os.environ.get("PORT", "5000"))
    app.run(host="0.0.0.0", port=port, debug=False)
